 ____   ___  _       _        _    ____  
/ ___| / _ \| |     | |      / \  | __ ) 
\___ \| | | | |     | |     / _ \ |  _ \ 
 ___) | |_| | |___  | |___ / ___ \| |_) |
|____/ \__\_\_____| |_____/_/   \_\____/ 
                                         
(HDS) / Updated: April 23, 2019

----------------------------------------
Task Overview
----------------------------------------

In this lab you will be implementing the Zipcoder, a website which tells you where a zipcode is. Zipcodes are 5 digit numbers which specify a region in the United States (a town, a part of a city, etc.). For example:

22903: Charlottesville, VA

10001: A sliver of Manhattan

20500: The White House

You'll be implementing this in two parts. In the first part -- the loader -- you'll be writing a Node program (not a server of any kind) which loads Zipcodes from a CSV (comma-separated value) file into a SQLite database. In the second part you'll write a server using that database to answer queries.

Using your programs should go like this:

	#if zipcodes.db already exists, delete it to start fresh
	rm zipcodes.db

	#build a new zipcodes.db
	node loader.js

	#run your server
	node server.js

	#test your service in your browser!

----------------------------------------
Setup
----------------------------------------

Install Node.JS locally on your system:
	Mac Steps: https://nodesource.com/blog/installing-nodejs-tutorial-mac-os-x/
	Windows Steps: https://blog.teamtreehouse.com/install-node-js-npm-windows
	Linux: Use your package manager to install the maintained version of node/npm

Open a Terminal (Mac) / Command Prompt (Windows) to the directory containing this file, then run "npm install" (without quotes) to install required libraries for this lab. This shouldn't raise any errors.

Open up loader.js and you will notice we've required two modules at the top, 'anyDB' and 'zipcoder.js'. Zipcoder is a local module written for you to read in a comma seperated list of zipcodes (.csv files), more on that later.

AnyDB is a package on npm that provides a simplified interface between your Node app and a database. One nice thing about AnyDB is that it makes it easy to swap one type of database for another. AnyDB provides a common way to interact with databases, regardless of which specific one we choose. The first step is to create a connection to our database.

	var conn = anyDB.createConnection('sqlite3://zipcodes.db');

This creates a variable conn which now acts as our access point into the database file. For instance: if we want to run a bit of SQL on our database we use conn.query('INSERT SQL HERE').

----------------------------------------
Running Queries with AnyDB
----------------------------------------

AnyDB actually lets us run queries in two different ways. Perhaps the most straightforward method is to provide the query with a callback function to be called once the SQL has run on our database.

	conn.query('SQL STATEMENT', function(error, result) {...});

The result objects will have an array of rows in result.rows, so if you have 10 results with all with column age you should be able to read values with results.rows[0].age (or any other index to read other returned rows).

You'll almost never want to do it that way. We can attach callbacks to specific events on the query. This is quite a useful feature of AnyDB since we can (for instance with a SELECT query) process rows as they are read from the database, instead of all at once.

	conn.query('SELECT STATEMENT').on('data', function(row) {...});

Specifically, anyDB supports data, end and error events. The end event is fired when, as you might have guessed, the query has completed.

The row objects will correspond to rows, so if you have a table with column age you should be able to read that value with row.age in the example above.

----------------------------------------
1: Loader (filling in loader.js)
----------------------------------------

Hopefully now the stencil code makes sense. It's your job to fill in the SQL to create the table that will store the zip codes. Make sure you create a column for each field you will be storing. What type should each field be?

conn.query('SOME SQL STATEMENT TO DEFINE YOUR TABLE') 
    .on('end', function() {
      console.log('Made table!');
    });

Once you have created a table, you'll need to populate it with data from one of the .csv files. The zipcoder module helps you do this. As you'll find in the stencil code, zipcoder takes a .csv file of regions and calls a callback function on each region. The stencil code prints out the region, which might be useful for testing, but you will want to insert each region into your table here.

zipcoder('some_zipcodes.csv', function(region) {
  console.log(region);
  // insert region into table
  conn.query('SQL STATEMENT TO INSERT A ROW', [param1, param2, ...])
    .on('error', console.error);
});

Notes The parameters should line up with the each column in the row you are inserting. You should use parameterized queries whenever you're constructing a SQL statement from outside data. So instead of building the query string with variables: 'INSERT INTO people VALUES (' + firstname + ', ' + lastname + ', ' + age + ')', use 'INSERT INTO people VALUES ($1, $2, $3)' and pass the values that those $ should be replaced with in the parameters array. e.g. conn.query('INSERT INTO people VALUES ($1, $2, $3)', ['Jackson', 'Owens', age]). It's faster, easier for you to read and write, and secure. * You should treat Zipcodes as strings or text for this assignment (if you make them integers leading 0s will be stripped off).

----------------------------------------
2: Server (filling in server.js)
----------------------------------------

The second portion of your task is to write a server using Node and Express to allow users to look up the locations of Zipcodes. You can implement this any way that works, but one simple (and uninteresting!) way might be to display the location of a Zipcode in the URL:

localhost:8080/02912

-> PROVIDENCE, RI

You can parametrize the path with Express simply:

app.get('/:zipcode', function(request, response){
    //request.params.zipcode contains the Zipcode from the path!
    //Use that to write a parametrized query for your database and send the result.
});

See the SELECT example above in "Running queries with AnyDB" section for a snippet to use in server.js.
